// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (name, url, user_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, name, url, user_id
`

type CreateFeedParams struct {
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Name, arg.Url, arg.UserID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedIDByUrl = `-- name: GetFeedIDByUrl :one
SELECT id FROM feeds WHERE url = $1
`

func (q *Queries) GetFeedIDByUrl(ctx context.Context, url string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getFeedIDByUrl, url)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getFeedsWithUserName = `-- name: GetFeedsWithUserName :many
SELECT feeds.name, feeds.url, users.name AS user_name FROM feeds
INNER JOIN users ON feeds.user_id = users.id
`

type GetFeedsWithUserNameRow struct {
	Name     string
	Url      string
	UserName string
}

func (q *Queries) GetFeedsWithUserName(ctx context.Context) ([]GetFeedsWithUserNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUserName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUserNameRow
	for rows.Next() {
		var i GetFeedsWithUserNameRow
		if err := rows.Scan(&i.Name, &i.Url, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
